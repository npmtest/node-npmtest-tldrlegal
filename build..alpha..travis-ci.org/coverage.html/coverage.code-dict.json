{"/home/travis/build/npmtest/node-npmtest-tldrlegal/test.js":"/* istanbul instrument in package npmtest_tldrlegal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldrlegal/lib.npmtest_tldrlegal.js":"/* istanbul instrument in package npmtest_tldrlegal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tldrlegal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tldrlegal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tldrlegal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tldrlegal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tldrlegal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tldrlegal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tldrlegal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tldrlegal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tldrlegal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tldrlegal.__dirname + '/lib.npmtest_tldrlegal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldrlegal/node_modules/tldrlegal/index.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar log = require('npmlog');\nvar program = require('commander');\nvar output = require('./lib/output');\nvar licensing = require('./lib/licensing');\nvar legally = require('legally/lib/legally');\nvar obligationInfo = require('./metadata/obligationInfo');\nvar licenseObligations = require('./metadata/licenseObligations');\n\n// Define arguments and options\nprogram\n    .version('1.0.0')\n    .option('--folder <path>', 'set path to project root with node_modules/ directory')\n    .parse(process.argv);\n\n// Main project directory\nvar projectDirectory = program.folder || process.cwd();\n\n// Is the node_modules directory missing?\nif (!fs.existsSync(projectDirectory + '/node_modules')) {\n    return log.error('tldrlegal', 'Please run this tool from within a JavaScript project with a node_modules directory.');\n}\n\n// Fetch dependencies and their licenses by directory\nvar packages = legally(projectDirectory);\n\n// Result variables\nvar results = {}, unknownLicenses = [];\n\n// Traverse all dependencies\nfor (var packageName in packages) {\n    // Get SPDX license code\n    var license = licensing.getPreferredPackageLicense(packages[packageName]);\n\n    // Get obligations for this license\n    var obligations = licenseObligations[license];\n\n    // No obligations documented for this license?\n    if (!obligations) {\n        // Add to list of unknown licenses\n        unknownLicenses.push([packageName, license]);\n\n        // Nothing else to do here\n        continue;\n    }\n\n    // Traverse obligations for this license\n    for (var obligation in obligations) {\n        // Is this an irrelevant obligation?\n        if (licensing.isIrrelevant(obligation)) {\n            continue;\n        }\n\n        // Prepare an array of packages for this obligation\n        if (!results[obligation]) {\n            results[obligation] = [];\n        }\n\n        // Add current package and its license under this obligation\n        results[obligation].push({name: packageName, license: license});\n    }\n}\n\n// Traverse possible license obligations\nfor (var obligation in obligationInfo) {\n    // Is this an irrelevant obligation?\n    if (licensing.isIrrelevant(obligation)) {\n        continue;\n    }\n\n    // Already have results for this obligation?\n    if (results[obligation]) {\n        continue;\n    }\n\n    // Initialize obligation array for summary view\n    results[obligation] = [];\n}\n\n// Output everything\noutput(results, unknownLicenses, packages);","/home/travis/build/npmtest/node-npmtest-tldrlegal/node_modules/tldrlegal/lib/licensing.js":"var obligationInfo = require('../metadata/obligationInfo');\nvar licenseObligations = require('../metadata/licenseObligations');\n\n// Invalid but common SPDX license codes \nvar invalidSPDX = [\n    'BSD',\n    'BSD like'\n];\n\nexports.isIrrelevant = function (obligation) {\n    // Check if this obligation should be ignored\n    return obligationInfo[obligation].isIrrelevant === true;\n}\n\nexports.getPreferredPackageLicense = function (lib) {\n    // License sources, prioritized by integrity\n    var sources = [lib.package, lib.license, lib.readme];\n\n    // Fallback license\n    var fallbackLicense;\n\n    // Traverse license sources (README / package.json / LICENSE file)\n    for (var sourceLicenses of sources) {\n        // Possible licenses list\n        var possibleLicenses = [];\n\n        // Traverse detected licenses for this source\n        for (var license of sourceLicenses) {\n            // Ignore inspecific BSD\n            if (invalidSPDX.indexOf(license) !== -1) {\n                fallbackLicense = license;\n                continue;\n            }\n\n            // Add to licenses list along with obligation count\n            possibleLicenses.push({ license: license, obligations: getObligationCount(license) });\n        }\n\n        // No licenses detected for this source?\n        if (possibleLicenses.length === 0) {\n            continue;\n        }\n\n        // Sort licenses by obligations ASC\n        possibleLicenses.sort(function (a, b) {\n            // -1 means place a before b\n            return (a.obligations < b.obligations ? -1 : 1);\n        });\n\n        // Return license with least obligations for this source\n        return possibleLicenses[0].license;\n    }\n\n    // Defautl to fallback license, if no fallback then return '-'\n    return fallbackLicense || '-';\n}\n\nfunction getObligationCount(license) {\n    // Set default obligation count as high as possible so this license isn't preferred\n    var obligationCount = 100;\n\n    // Got obligations for this license?\n    if (licenseObligations[license]) {\n        // Reset obligation count\n        obligationCount = 0;\n\n        // Traverse obligation codes\n        for (var obligation in licenseObligations[license]) {\n            // Is obligation irrelevant?\n            if (exports.isIrrelevant(obligation)) {\n                continue;\n            }\n\n            // It's not irrelevant\n            obligationCount++;\n        }\n    }\n\n    // Return obligation count\n    return obligationCount;\n}","/home/travis/build/npmtest/node-npmtest-tldrlegal/node_modules/tldrlegal/metadata/obligationInfo.js":"module.exports = {\n    giveCredit: {\n        title: 'Give Credit',\n        desc: 'You must display an acknowledgement in all advertising materials mentioning features or use of these packages.'\n    },\n    stateChanges: {\n        title: 'State Changes',\n        desc: 'You must state significant changes made to these packages.'\n    },\n    discloseSource: {\n        title: 'Disclose Source',\n        desc: 'You must disclose your source code when you distribute your software.'\n    },\n    includeOriginal: {\n        title: 'Include Original',\n        desc: 'You must distribute copies of these original packages or instructions to obtain copies with your software.'\n    },\n    rename: {\n        title: 'Rename (If License Modified)',\n        desc: 'You must rename these packages\\' licenses if you change their terms.'\n    },\n    includeLicense: {\n        // When you npm install a package, this obligation is met automatically\n        isIrrelevant: true,\n        title: 'Include License',\n        desc: 'You must include the license notice in all copies or substantial uses of these packages.'\n    },\n    includeCopyright: {\n        // When you npm install a package, this obligation is met automatically\n        isIrrelevant: true,\n        title: 'Include Copyright',\n        desc: 'You must include the copyright notice in all copies or substantial uses of these packages.'\n    },\n    includeNotice: {\n        // When you npm install a package, this obligation is met automatically\n        isIrrelevant: true,\n        title: 'Include Notice',\n        desc: 'If these packages have a \"NOTICE\" file with attribution notes, you must include that NOTICE when you distribute. You may append to these NOTICE files.'\n    },\n}","/home/travis/build/npmtest/node-npmtest-tldrlegal/node_modules/tldrlegal/metadata/licenseObligations.js":"// Information obtained from tldrlegal.com\nmodule.exports = {\n    'MIT': {\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'ISC': {\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'Apache 2.0': {\n        stateChanges: true,\n        includeNotice: true,\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'AFL 3.0': {\n        includeOriginal: true,\n        discloseSource: true,\n        includeCopyright: true\n    },\n    'BSD 2 Clause': {\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'BSD 3 Clause': {\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'BSD 4 Clause': {\n        giveCredit: true,\n        includeLicense: true,\n        includeCopyright: true\n    },\n    'GPL 2.0': {\n        stateChanges: true,\n        includeLicense: true,\n        discloseSource: true,\n        includeOriginal: true,\n        includeCopyright: true\n    },\n    'WTFPL': {\n        rename: true\n    },\n    'CC BY 4.0': {\n        giveCredit: true,\n        stateChanges: true,\n        includeCopyright: true\n    },\n    'CC0': {\n    },\n    'Public domain': {\n    }\n};","/home/travis/build/npmtest/node-npmtest-tldrlegal/node_modules/tldrlegal/lib/output.js":"var table = require('legally/lib/table');\nvar obligationInfo = require('../metadata/obligationInfo');\n\nmodule.exports = function (results, unknownLicenses, packages) {\n    // Output summary table\n    outputSummary(results, packages);\n\n    // Output obligations and their packages\n    outputObligationsAndPackages(results);\n\n    // Output packages whose license is not recognized\n    outputUnknownLicenses(unknownLicenses);\n\n    // Output general disclaimer\n    outputDisclaimer();\n}\n\nfunction outputSummary(results, packages) {\n    // Table rows\n    var rows = [];\n\n    // Traverse obligations\n    for (var obligation in results) {\n        // Get obligation title\n        var obligationTitle = obligationInfo[obligation].title;\n\n        // Add table row for this obligation\n        rows.push(['Must ' + obligationTitle, results[obligation].length + ' packages']);\n    }\n\n    // Generate and output table\n    table(rows, { Obligation: 35, Packages: 20 }, { title: `License Obligation Summary (${Object.keys(packages).length} Packages)` });\n}\n\nfunction outputObligationsAndPackages(results) {\n    // Traverse obligations\n    for (var obligation in results) {\n        // No results for this obligation?\n        if (results[obligation].length === 0) {\n            continue;\n        }\n\n        // Table rows\n        var rows = [];\n\n        // Fetch obligation info for this obligation\n        var info = obligationInfo[obligation];\n\n        // Traverse obligation packages\n        for (var package of results[obligation]) {\n            // Add package to table\n            rows.push([package.name, package.license]);\n        }\n\n        // Generate and output table for each obligation\n        table(rows, { [info.desc]: info.desc.length, License: 10 }, { title: info.title });\n    }\n}\n\nfunction outputUnknownLicenses(unknownLicenses) {\n    // No unknown licenses?\n    if (unknownLicenses.length === 0) {\n        return;\n    }\n    \n    // Generate and output table\n    table(unknownLicenses, { Package: 40, License: 40 }, { title: 'Unknown Licenses' });\n}\n\nfunction outputDisclaimer() {\n    // Table rows\n    var notices = [\n        ['This tool is not a replacement for proper legal consultation.'],\n        ['Also, be advised that the information above may not be 100% accurate.']\n    ];\n\n    // Disclaimer notice\n    var disclaimer = 'None of the above information is legal advice.';\n\n    // Generate and output table\n    table(notices, { [disclaimer]: 80 }, { title: 'Disclaimer' });\n}\n"}